pipeline {
    agent any

    options {
        skipDefaultCheckout(true) // Skip default checkout to customize the Git checkout
    }

    stages {
        stage('Code Checkout from GitHub') {
            steps {
                script {
                    cleanWs() // Clean workspace before checking out code
                    // Check out the code from the specified Git repository and branch
                    git credentialsId: 'github-token', url: 'https://github.com/AdamKazmierczak/abcd-student', branch: 'develop'
                }
            }
        }
        
        stage('SCA Scan') {
            steps {
                script {
                    // Ensure the results directory exists
                    sh 'mkdir -p results'
                    
                    // Run the OSV scanner and capture its output in Markdown format
                    def scanOutput = sh(script: 'osv-scanner scan --lockfile package-lock.json --format markdown --output results/sca-osv-scanner.md', returnStdout: true).trim()
                    
                    // Log the scan output
                    echo "OSV Scanner Output: ${scanOutput}"
                    
                    // Capture exit code to check if the scan was successful
                    def exitCode = sh(returnStatus: true, script: 'echo $?')
                    
                    // Log the exit code
                    echo "OSV scanner finished with exit code: ${exitCode}"
                    
                    // Check if the OSV scanner failed
                    if (exitCode != 0) {
                        echo "Warning: OSV scanner returned a non-zero exit code."
                    }
                }
            }
        }

        stage('Generate Report') {
            steps {
                script {
                    // Prepare the Markdown report (optional)
                    def reportContent = new StringBuilder()
                    reportContent.append("# SCA Report\n\n")
                    reportContent.append("This report summarizes the results from the OSV scanner.\n\n")
                    reportContent.append("## Summary\n\n")
                    
                    // You can include details about the vulnerabilities in Markdown format here if needed
                    // For now, we will just refer to the Markdown report that was generated
                    reportContent.append("The detailed SCA report can be found in Markdown format in the results directory: [sca-osv-scanner.md](results/sca-osv-scanner.md)\n\n")

                    // Write the optional Markdown report to a file
                    writeFile file: 'results/sca-report.md', text: reportContent.toString()
                }
            }
        }
    }
    
    post {
        always {
            // Archive the Markdown report for later review
            archiveArtifacts artifacts: 'results/sca-osv-scanner.md', allowEmptyArchive: true
            
            // Archive the optional report (if generated)
            archiveArtifacts artifacts: 'results/sca-report.md', allowEmptyArchive: true

            defectDojoPublisher(artifact: 'results/sca-osv-scanner.json', 
                productName: 'Juice Shop', 
                scanType: 'OSV Scan', 
                engagementName: 'adaml.kazmierczak@gmail.com')

            // Clean up workspace after the job
            cleanWs()
        }
        
        success {
            echo "Pipeline completed successfully."
        }

        failure {
            echo "Pipeline failed."
        }
    }
}
