pipeline {
    agent any

    options {
        skipDefaultCheckout(true) // Skip default checkout to customize the Git checkout
    }

    stages {
        stage('Code Checkout from GitHub') {
            steps {
                script {
                    cleanWs() // Clean workspace before checking out code
                    // Check out the code from the specified Git repository and branch
                    git credentialsId: 'github-token', url: 'https://github.com/AdamKazmierczak/abcd-student', branch: 'develop'
                }
            }
        }
        
        stage('SCA Scan') {
            steps {
                script {
                    // Ensure the results directory exists
                    sh 'mkdir -p results'
                    
                    // Run the OSV scanner and capture its output
                    def scanOutput = sh(script: 'osv-scanner scan --lockfile package-lock.json --format json --output results/sca-osv-scanner.json', returnStdout: true).trim()
                    
                    // Log the scan output
                    echo "OSV Scanner Output: ${scanOutput}"
                    
                    // Capture exit code to check if the scan was successful
                    def exitCode = sh(returnStatus: true, script: 'echo $?')
                    
                    // Log the exit code
                    echo "OSV scanner finished with exit code: ${exitCode}"
                    
                    // Check if the OSV scanner failed
                    if (exitCode != 0) {
                        echo "Warning: OSV scanner returned a non-zero exit code."
                    }
                }
            }
        }

        stage('Generate Report') {
            steps {
                script {
                    // Read the results from the OSV scanner JSON output
                    def jsonContent = [:] // Initialize an empty map to handle the case where the file might not exist
                    try {
                        jsonContent = readJSON file: 'results/sca-osv-scanner.json'
                    } catch (Exception e) {
                        echo "Warning: Failed to read OSV scanner results. ${e.getMessage()}"
                    }
                    
                    // Prepare the Markdown report
                    def reportContent = new StringBuilder()
                    reportContent.append("# SCA Report\n\n")
                    reportContent.append("## Summary\n\n")
                    reportContent.append("This report summarizes the results from the OSV scanner.\n\n")
                    
                    // Add vulnerability details to the report
                    if (jsonContent.results) {
                        jsonContent.results.each { result ->
                            result.packages.each { pkg ->
                                reportContent.append("### Package: ${pkg.package.name} (Version: ${pkg.package.version})\n")
                                pkg.vulnerabilities.each { vuln ->
                                    reportContent.append("- **ID**: ${vuln.id}\n")
                                    reportContent.append("- **Summary**: ${vuln.summary}\n")
                                    reportContent.append("- **Published**: ${vuln.published}\n")
                                    reportContent.append("- **Modified**: ${vuln.modified}\n")
                                    reportContent.append("- **Severity**: ${vuln.database_specific.severity}\n")
                                    reportContent.append("- **Details**: ${vuln.details}\n")
                                    reportContent.append("- **Recommendation**: ${vuln.details}\n\n")
                                }
                            }
                        }
                    } else {
                        reportContent.append("No vulnerabilities found.\n")
                    }
                    
                    // Write the report to a Markdown file
                    writeFile file: 'results/sca-report.md', text: reportContent.toString()
                }
            }
        }
    }
    
    post {
        always {
            // Archive the OSV scan report and the generated report for later review
            archiveArtifacts artifacts: 'results/sca-osv-scanner.json', allowEmptyArchive: true
            archiveArtifacts artifacts: 'results/sca-report.md', allowEmptyArchive: true
            
            // Clean up workspace after the job
            cleanWs()
        }
        
        success {
            echo "Pipeline completed successfully."
        }

        failure {
            echo "Pipeline failed."
        }
    }
}
