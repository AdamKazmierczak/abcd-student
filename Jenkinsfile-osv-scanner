pipeline {
    agent any

    options {
        skipDefaultCheckout(true)
    }

    stages {
        stage('Code checkout from GitHub') {
            steps {
                script {
                    cleanWs()
                    git credentialsId: 'github-token', url: 'https://github.com/AdamKazmierczak/abcd-student', branch: 'develop'
                }
            }
        }
        
        stage('SCA scan') {
            steps {
                script {
                    // Ensure results directory exists
                    sh 'mkdir -p results'
                    
                    // Run osv-scanner and capture both output and exit code
                    def exitCode = sh(returnStatus: true, script: 'osv-scanner scan --lockfile package-lock.json --format json --output results/sca-osv-scanner.json')
                    
                    // Log the exit code
                    echo "OSV scanner finished with exit code: ${exitCode}"
                    
                    // Check if scan failed
                    if (exitCode != 0) {
                        error "Warning: OSV scanner returned a non-zero exit code."
                    }
                }
            }
        }
        
        stage('Generate SCA Report') {
            steps {
                script {
                    // Read the JSON output from the scan
                    def scaReport = readJSON file: 'results/sca-osv-scanner.json'

                    // Initialize a report string
                    def report = "### SCA Vulnerability Report\n\n"
                    report += "#### Source: ${scaReport.results[0].source.path}\n\n"

                    // Iterate over the results to create the report
                    for (result in scaReport.results) {
                        for (pkg in result.packages) {
                            def packageName = pkg.package.name
                            def packageVersion = pkg.package.version
                            report += "#### Package: ${packageName} (Version: ${packageVersion})\n"

                            if (pkg.vulnerabilities && pkg.vulnerabilities.size() > 0) {
                                for (vuln in pkg.vulnerabilities) {
                                    report += "  - **Vulnerability ID**: ${vuln.id}\n"
                                    report += "    - **Summary**: ${vuln.summary}\n"
                                    report += "    - **Published**: ${vuln.published}\n"
                                    report += "    - **Modified**: ${vuln.modified}\n"
                                    report += "    - **Severity**: ${vuln.database_specific.severity}\n"
                                    report += "    - **References**:\n"

                                    for (ref in vuln.references) {
                                        report += "      - [${ref.type}](${ref.url})\n"
                                    }

                                    // Add affected versions information
                                    if (vuln.affected && vuln.affected.size() > 0) {
                                        for (affected in vuln.affected) {
                                            report += "    - **Affected Package**: ${affected.package.name}\n"
                                            report += "      - **Ecosystem**: ${affected.package.ecosystem}\n"
                                            if (affected.ranges && affected.ranges.size() > 0) {
                                                for (range in affected.ranges) {
                                                    report += "        - **Version Range**: ${range.events.collect { "${it.introduced ?: 'N/A'} to ${it.fixed ?: 'N/A'}" }.join(' - ')}\n"
                                                }
                                            }
                                        }
                                    }

                                    report += "\n"
                                }
                            } else {
                                report += "  - No vulnerabilities found.\n\n"
                            }
                        }
                    }

                    // Write the report to a file
                    writeFile file: 'results/sca-report.md', text: report
                    echo "Report generated: results/sca-report.md"
                }
            }
        }
    }
    
    post {
        always {
            // Archive the OSV scan report and the generated report for later review
            archiveArtifacts artifacts: 'results/sca-osv-scanner.json', allowEmptyArchive: true
            archiveArtifacts artifacts: 'results/sca-report.md', allowEmptyArchive: true
        }
    }
}
