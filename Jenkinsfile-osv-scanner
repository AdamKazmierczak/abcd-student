pipeline {
    agent any

    options {
        skipDefaultCheckout(true)
    }

    stages {
        stage('Code checkout from GitHub') {
            steps {
                script {
                    cleanWs()
                    git credentialsId: 'github-token', url: 'https://github.com/AdamKazmierczak/abcd-student', branch: 'develop'
                }
            }
        }
        
        stage('SCA scan') {
            steps {
                script {
                    // Ensure results directory exists
                    sh 'mkdir -p results'
                    
                    // Run osv-scanner and capture both output and exit code
                    def exitCode = sh(returnStatus: true, script: 'osv-scanner scan --lockfile package-lock.json --format json --output results/sca-osv-scanner.json')
                    
                    // Log the exit code
                    echo "OSV scanner finished with exit code: ${exitCode}"
                    
                    // Check if scan failed
                    if (exitCode != 0) {
                        echo "Warning: OSV scanner returned a non-zero exit code."
                    }
                }
            }
        }
        
        stage('Read and Print SCA Report') {
            steps {
                script {
                    // Read the JSON output from the scan
                    def scaReport = readJSON file: 'results/sca-osv-scanner.json'
                    
                    // Print the entire report for debugging purposes
                    echo "SCA Report: ${scaReport}"

                    // Iterate over the packages to check for vulnerabilities
                    def packages = scaReport.collect { it.packages }.flatten() // Flatten the list of packages
                    def vulnerabilitiesFound = false
                    
                    for (pkg in packages) {
                        def packageName = pkg.package.name
                        def packageVersion = pkg.package.version
                        def vulnerabilities = pkg.vulnerabilities

                        if (vulnerabilities && vulnerabilities.size() > 0) {
                            vulnerabilitiesFound = true
                            echo "Vulnerabilities found for package: ${packageName} (version: ${packageVersion}):"
                            
                            for (vuln in vulnerabilities) {
                                def vulnId = vuln.id ?: 'N/A'
                                def summary = vuln.summary ?: 'N/A'
                                def details = vuln.details ?: 'N/A'
                                def severity = vuln.database_specific?.severity ?: 'N/A'
                                def references = vuln.references?.collect { it.url }.join(", ") ?: 'N/A'
                                
                                // Print vulnerability details
                                echo """
                                Vulnerability ID: ${vulnId}
                                Summary: ${summary}
                                Details: ${details}
                                Severity: ${severity}
                                References: ${references}
                                """
                            }
                        }
                    }
                    
                    if (!vulnerabilitiesFound) {
                        echo "No vulnerabilities found in the report."
                    }
                }
            }
        }
    }
    
    post {
        always {
            // Archive the OSV scan report for later review
            archiveArtifacts artifacts: 'results/sca-osv-scanner.json', allowEmptyArchive: true
        }
    }
}
